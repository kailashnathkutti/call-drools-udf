package com.kiin.pig;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.apache.pig.EvalFunc;
import org.apache.pig.data.Tuple;
import org.drools.core.command.impl.GenericCommand;
import org.kie.api.KieServices;
import org.kie.api.command.BatchExecutionCommand;
import org.kie.server.api.marshalling.MarshallingFormat;
import org.kie.server.api.model.ServiceResponse;
import org.kie.server.client.KieServicesClient;
import org.kie.server.client.KieServicesConfiguration;
import org.kie.server.client.KieServicesFactory;
import org.kie.server.client.RuleServicesClient;

import com.kiin.udf.ConfigUtil;
import com.kiin.udf.FileContent;

/**
 * Simple REST API call from Apache Pig. This is not quite scalable as
 * concurrent calls to REST gateway can kill REST server. However, it is a
 * possibility There are some funny code snippets like replace a __ with _ in
 * this bit. Please ignore it for now.
 * 
 * This UDF return only those records that passes DQ1 and D2
 */
public class validate_against_rules extends EvalFunc<String> {

	/**
	 * USERNAME to access KIE server. In KIE server, this user must have
	 * REST-ALL role SRVR_URL is something like
	 * http://<<host>>:8080/kie-server/services/rest/server CONTAINER is the
	 * name of REST end point without URI
	 */
	public static String USERNAME;
	public static String PASSWORD;
	public static String SRVR_URL;
	public static String CONTAINER;
	public static FileContent fileContent = null;

	/**
	 * Init method would have been cleaner.
	 */
	public validate_against_rules() {

		// Read them all from droolsconnection.properties under the resources
		// folder
		USERNAME = ConfigUtil.getPropertyByName("USERNAME");
		PASSWORD = ConfigUtil.getPropertyByName("PASSWORD");
		SRVR_URL = ConfigUtil.getPropertyByName("SRVR_URL");
		CONTAINER = ConfigUtil.getPropertyByName("CONTAINER");

	}

	public String exec(Tuple lineOfTextFromFileInput) throws IOException {

		KieServicesConfiguration config = KieServicesFactory.newRestConfiguration(SRVR_URL, USERNAME, PASSWORD);
		// You may want to consider JSON which is a lot neater and cleaner. Old
		// folks use XML :-D
		config.setMarshallingFormat(MarshallingFormat.XSTREAM);
		KieServicesClient client = KieServicesFactory.newKieServicesClient(config);
		RuleServicesClient ruleClient = client.getServicesClient(RuleServicesClient.class);

		// The File content object generated by kie work bench has been modified
		// with XML annotation so that XML Unmarsheller can parse the KIE REST
		// response
		fileContent = new FileContent();

		String result = "";

		String RESTOutput = null;
		
		String returnOutput = "";
		
		// Big assumption, file separate is tab.
		if (lineOfTextFromFileInput == null || lineOfTextFromFileInput.size() == 0)
			return null;
		else {

			String str = (String) lineOfTextFromFileInput.get(0);

			String strArr[] = str.split("\t");
			// File has only 49 columns
			if (strArr.length == 0 || strArr.length < 49)
				return null;
			else {
				// Processing only few aspect of the file as it is only a demo
				fileContent.setSite_producer_name(strArr[0]);
				fileContent.setSite_sender_name(strArr[1]);
				fileContent.setOrder_number(strArr[2]);
				fileContent.setOrderer_code(strArr[3]);
				fileContent.setOrderer_group(strArr[4]);
				fileContent.setSample_is_urgent(strArr[5]);
				fileContent.setEvent_datetime(strArr[26]);
				fileContent.setOrderer_functional_unit("");
				fileContent.setSample_id("");
				fileContent.setSample_subtype("");
				fileContent.setSample_rank("");
				fileContent.setSample_is_real("");
				fileContent.setSample_is_aliquot("");
				fileContent.setSample_aliquot_parent_id("");
				fileContent.setSample_type_connection_instrument_code("");
				fileContent.setSample_type("");
				fileContent.setSample_type_label("");
				fileContent.setTube_preanalytical_mpl_link_code("");
				fileContent.setTube_preanalytical_mpl_workcycle("");
				fileContent.setTube_preanalytical_mpl_workplace("");
				fileContent.setParameter_name("");
				fileContent.setParameter_with_sample_type_name("");
				fileContent.setParameter_instrument_connection_code("");
				fileContent.setParameter_lis_connection_code("");
				fileContent.setParameter_discipline_name("");
				fileContent.setParameter_type("");
				fileContent.setEvent_id("");
				fileContent.setEvent_actor("");
				fileContent.setInstrument_name("");
				fileContent.setInstrument_serial_number("");
				fileContent.setInstrument_mpl_number("");
				fileContent.setInstrument_model("");
				fileContent.setInstrument_parent_name("");
				fileContent.setInstrument_connection_driver_type("");
				fileContent.setLis_connection_code("");
				fileContent.setParameter_dimension_1("");
				fileContent.setParameter_dimension_2("");
				fileContent.setParameter_dimension_3("");
				fileContent.setParameter_dimension_4("");
				fileContent.setParameter_dimension_5("");
				fileContent.setInstrument_dimension_1("");
				fileContent.setInstrument_dimension_2("");
				fileContent.setExportation_realisation_date("");
				fileContent.setExportation_date("");
				fileContent.setCustomer_licence_name("");
				fileContent.setMiddleware_network_id("");
				fileContent.setCustomer_contract_isppm("");
				fileContent.setFile_name("");

			}

			// Boilerplate stuff to trigger REST
			List<GenericCommand<?>> commands = new ArrayList<GenericCommand<?>>();
			commands.add(
					(GenericCommand<?>) KieServices.Factory.get().getCommands().newInsert(fileContent, "InputData"));
			commands.add(
					(GenericCommand<?>) KieServices.Factory.get().getCommands().newFireAllRules("fire-identifier"));

			BatchExecutionCommand batchCommand = KieServices.Factory.get().getCommands().newBatchExecution(commands);
			ServiceResponse<String> response2 = ruleClient.executeCommands(CONTAINER, batchCommand);
			// System.out.println(response2.getResult());

			RESTOutput = response2.getResult();
			// Code below is to unmarshall REST object and do something about it, if needed. In this bit  
			JAXBContext jaxbContext;
			try {

				jaxbContext = JAXBContext.newInstance(FileContent.class);

				Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
				// I know it is nasty but for now an experiment it is ok
				String textFrom = "<result identifier=\"InputData\">";
				String textTo = "</result>";
				result = RESTOutput.substring(RESTOutput.indexOf(textFrom) + textFrom.length(), RESTOutput.length());

				result = result.substring(0, result.indexOf(textTo));

				// I have no idea how such an extra underscore get appended to
				// every XML attributed! Well, who cares as long you can replace
				// them in a single line of code
				CharSequence cs1 = "__";
				if (result.contains(cs1))
					result = result.replaceAll("__", "_");

				FileContent fileOut = (FileContent) jaxbUnmarshaller.unmarshal(new StringReader(result));
				
				//Return only those records which passes rule 1 and 2.
				if (fileOut.isDq1_passed() && fileOut.isDq2_passed())
					returnOutput = result; 
				

				// Handle your exceltions well dude, I have no time
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return returnOutput;
		}
	}

}
